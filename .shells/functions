# Functions to aid git workflow
function ga(){
    git-add $1
}

function gc(){
    git commit -m "$*"
}

function revert(){
    git reset --hard $1
}

# Useful unarchiver!
function extract () {
        if [ -f $1 ] ; then
                case $1 in
                        *.tar.bz2)        tar xjf $1                ;;
                        *.tar.gz)        tar xzf $1                ;;
                        *.bz2)                bunzip2 $1                ;;
                        *.rar)                rar x $1                ;;
                        *.gz)                gunzip $1                ;;
                        *.tar)                tar xf $1                ;;
                        *.tbz2)                tar xjf $1                ;;
                        *.tgz)                tar xzf $1                ;;
                        *.zip)                unzip $1                ;;
                        *.Z)                uncompress $1        ;;
                        *)                        echo "'$1' cannot be extracted via extract()" ;;
                esac
        else
                echo "'$1' is not a valid file"
        fi
}

# Find, needs 'sudo apt-get install silversearcher-ag'
# Ignores sandbox environments, in this case, folder
# starting with chroot/
function f()
{
    ag --ignore chroot "$@"
}

# Because I am a lazy bum, and this is
# surpisingly helpful..
function up()
{
    for i in `seq 1 $1`;
    do
        cd ../
    done;
}

# Required for the prompt to show git status
function parse_git_dirty {
[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
function parse_git_branch {
git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

wandb-sync () {
    local PAR=1           # default parallelism
    local DIRS=()

    # parse only one flag: -p <N>
    while [[ $# -gt 0 ]]; do
        if [[ $1 == -p ]]; then PAR=$2; shift 2
        else DIRS+=("$1"); shift
        fi
    done

    [[ ${#DIRS[@]} -eq 0 ]] && { echo "usage: wandb-sync <glob>â€¦ [-p N]"; return 1; }

    find "${DIRS[@]}" -maxdepth 0 -type d -print0 \
      | xargs -0 -n1 -P "$PAR" wandb sync
}
